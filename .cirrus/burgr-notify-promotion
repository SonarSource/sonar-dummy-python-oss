#!/bin/bash

set -euo pipefail

# Set the list of artifacts to display in BURGR
: "${ARTIFACTS?'parameter not set. This is a list of downloadable artifacts: <groupId>:<artifactId>:<extension>[:<classifier>],...'}"
: "${BUILD_NUMBER?}"
: "${BURGR_USERNAME?}" "${BURGR_PASSWORD?}" "${BURGR_URL?}"
: "${CIRRUS_REPO_OWNER?}" "${CIRRUS_REPO_NAME?}" "${CIRRUS_BUILD_ID?}"

# PROJECT_VERSION should exist in env set by set_maven_build_version in Maven project, it is calculated below for gradle projects
if test -f gradle.properties; then
  PROJECT_VERSION=$(sed -ne 's/^version=//p' gradle.properties)
  if [[ "${PROJECT_VERSION}" == *"-SNAPSHOT" ]]; then
    PROJECT_VERSION=${PROJECT_VERSION%-SNAPSHOT}
    IFS="." read -r -a DIGITS <<<"$PROJECT_VERSION"
    if [[ ${#DIGITS[@]} = 2 ]]; then
      PROJECT_VERSION=$PROJECT_VERSION.0
    fi
    PROJECT_VERSION=$PROJECT_VERSION.$BUILD_NUMBER
  fi
  export PROJECT_VERSION
  echo "$PROJECT_VERSION"
fi
# shellcheck disable=SC2016
: "${PROJECT_VERSION?:'parameter not set. In case of Maven do not forget: source set_maven_build_version "$BUILD_NUMBER"'}"

# Create the URL of an artifact given a GAC (i.e. org.sonarsource.sonarqube:sonar-application:zip or com.sonarsource.sonarqube:sonarqube-enterprise:yguard:xml)
function createArtifactURL() {
  IFS=":" read -r -a GAQE <<<"$1"
  GROUP_ID=${GAQE[0]}
  ARTIFACT_ID=${GAQE[1]}
  GROUP_ID_PATH=${GROUP_ID//./\/}

  FILENAME=$ARTIFACT_ID-$PROJECT_VERSION
  EXTENSION=
  if [ ${#GAQE[@]} = 4 ]; then
    CLASSIFIER=${GAQE[3]}
    EXTENSION=${GAQE[2]}
    FILENAME=$FILENAME-$CLASSIFIER
  else
    EXTENSION=${GAQE[2]}
  fi
  FILENAME=$FILENAME.$EXTENSION

  echo "$ARTIFACTORY_URL"/sonarsource/"$GROUP_ID_PATH"/"$ARTIFACT_ID"/"$PROJECT_VERSION"/"$FILENAME"
}

# Create a comma-separated list of URLs of artifacts
function createArtifactsURLS() {
  IFS="," read -r -a artifacts <<<"$1"
  URLS=""
  SEPARATOR=""
  for i in "${artifacts[@]}"; do
    URLS+=$SEPARATOR$(createArtifactURL "$i")
    SEPARATOR=,
  done
  echo "$URLS"
}

URLS=
if [[ -n $ARTIFACTS ]]; then
  URLS=$(createArtifactsURLS "$ARTIFACTS")
fi

BURGR_FILE=promote.burgr
cat >$BURGR_FILE <<EOF
{
  "version":"$PROJECT_VERSION",
  "url":"$URLS",
  "buildNumber":"$BUILD_NUMBER"
}
EOF
echo "url ${BURGR_URL}/api/promote/${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}/${CIRRUS_BUILD_ID}"
{
  curl -sfSL -X POST -d @$BURGR_FILE -H "Content-Type:application/json" -u"${BURGR_USERNAME}:${BURGR_PASSWORD}" "${BURGR_URL}/api/promote/${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}/${CIRRUS_BUILD_ID}"
} || {
  echo "Burgr promotion notification failed with:"
  cat $BURGR_FILE
}
